/**
 * Need changes due to wrong presentation data structure, provided on API server.
 * TODO: `bgEnable?` property not exist. Temporary set property as optional.
 * TODO: `wrapContent` property not exist. Temporary set property as optional.
 * TODO: [TEXT] `fontSize` property type is string. Temporary set property type as string or number.
 * TODO: [WIDGET] `name` property not exist. Temporary set property as optional.
 */


// ==================== Presentation ====================

/** Raw presentation. */
export interface RawPresentation {
    [key: string]: any;
    /** Presentation ID. */
    id: string;
    /** Presentation name. */
    name: string;
    /** Presentation code. (Deprecated) */
    code: string;
    /** Presentation description. */
    desc: string;
    /** Presentation regions design. */
    regions: RawPresentationRegion[];
    /** Presentation background. */
    bg?: RawPresentationBackground;
    /** Does presentation using background? */
    bgEnable?: boolean;
    /** Presentation background audio. */
    bgAudio?: RawPresentationBackgroundAudio;
    /** Does presentation using background audio? */
    bgAudioEnable: boolean;
    /** Presentation width. (px) */
    width: number;
    /** Presentation height. (px) */
    height: number;
    /** Presentation ratio. (x:y) */
    ratio: string;
    /** Presentation orientation. */
    orientation: 'LANDSCAPE' | 'PORTRAIT';
    /** Action right (edit, use, ...) for restrict user access to presentation. */
    accessRight: number;
    /** Block edit and delete. */
    lock: boolean;
    /** Asset list generated by presentation editor. */
    assetList?: {
        /** Asset ID. */
        id: string;
        /** Asset file name. */
        name: string;
        /** Asset filename extension. */
        fileType: string;
        /** Asset file MD5 value. */
        md5: string;
    }[];
    /** Presentation content-sync rules. */
    rules?: RawPresentationRule[];
    /** Sensors working with presentation. */
    sensors?: RawPresentationSensors;
    /** Presentation updated date. */
    updatedDate?: string;
    /** Presentation created date. */
    createdDate?: string;
    /** Is this presentation is grid template? */
    isGridTpl?: boolean;
    /** Restrict access to the presentation under this level. */
    payLevelAccess?: 'FREE' | string;
    /** Is this presentation owned by system? */
    isSystem?: boolean;
    /** Is this presentation private? */
    isPrivate?: boolean;
    /** View counts for this presentation. */
    viewCounts?: number;
    /** Tags of presentation. */
    tags?: any[];
    /** Presentation status. */
    status?: 'ACTIVATED' | 'DEACTIVATED';
}

/** Raw presentation background. */
export interface RawPresentationBackground {
    /** Color (HEXA, #AARRGGBB) value or image ID. */
    id: string;
    /** Background type. */
    type: 'COLOR' | 'IMAGE';
    /** Image filename extension. */
    fileType?: string;
    /** Image file MIME type. */
    mimeType?: string;
    /** Image file MD5 value. */
    md5?: string;
}

/** Raw presentation background audio. */
export interface RawPresentationBackgroundAudio {
    /** Is audio need to be repeat? */
    isRepeat: boolean;
    /** List of audio. */
    audios: RawPresentationBackgroundAudioItem[];
}

/** Raw presentation background audio item. */
export interface RawPresentationBackgroundAudioItem {
    /** Audio asset ID. */
    id: string;
    /** Audio duration. (Play time) */
    duration: number;
    /** Audio delay after ends. */
    delay: number;
}

/** Raw presentation region. */
export type RawPresentationRegion =
    RawPresentationTextRegion |
    RawPresentationImageRegion |
    RawPresentationVideoRegion |
    RawPresentationWebpageRegion |
    RawPresentationWidgetRegion |
    RawPresentationFrameRegion |
    RawPresentationVectorGraphicRegion |
    RawPresentationFreeDrawRegion |
    RawPresentationSlideRegion;

/** Base of raw presentation region. */
interface RawPresentationBaseRegion {
    /** Region ID. */
    id: number | string;
    /** Region z-order. */
    zOrder: number;
    /** Slide effect of the region. (Experimental) */
    slideEffect: number;
    /** Slide effect time of the region. (Experimental) */
    slideTime: number;
    /** X coordinate of region. */
    x: number;
    /** Y coordinate of region. */
    y: number;
    /** Region width. */
    width: number;
    /** Region height. */
    height: number;
    /** Rotation degree of region (0 - 360) */
    rotate: number;
    /** Does region prevent editing? */
    lock?: boolean;
    /** Region background. */
    bg?: RawPresentationBackground;
    /** Does region using background? */
    bgEnable?: boolean;
    /** Region reaction events. */
    events?: {
        /** Event ID. */
        id: number | string;
        /** Event name. */
        name: string;
        /** Is the event enabled? */
        enable: boolean;
        /** Event type. */
        type: string;
        /** Event parameter. */
        param: string;
        /** Event action. */
        action: string;
    }[];
}

/** Raw presentation text region. */
export interface RawPresentationTextRegion extends RawPresentationBaseRegion {
    type: 'TEXT';
    properties: RawPresentationTextRegionProperties;
}

/** Raw presentation image region. */
export interface RawPresentationImageRegion extends RawPresentationBaseRegion {
    type: 'IMAGE';
    properties: RawPresentationImageRegionProperties;
}

/** Raw presentation video region. */
export interface RawPresentationVideoRegion extends RawPresentationBaseRegion {
    type: 'VIDEO';
    properties: RawPresentationVideoRegionProperties;
}

/** Raw presentation webpage region. */
export interface RawPresentationWebpageRegion extends RawPresentationBaseRegion {
    type: 'WEBPAGE';
    properties: RawPresentationWebpageRegionProperties;
}

/** Raw presentation widget region. */
export interface RawPresentationWidgetRegion extends RawPresentationBaseRegion {
    type: 'WIDGET';
    properties: RawPresentationWidgetRegionProperties;
}

/** Raw presentation frame region. */
export interface RawPresentationFrameRegion extends RawPresentationBaseRegion {
    type: 'FRAME';
    properties: RawPresentationFrameRegionProperties;
}

/** Raw presentation vector graphic region. */
export interface RawPresentationVectorGraphicRegion extends RawPresentationBaseRegion {
    type: 'VECTOR_GRAPHIC';
    properties: RawPresentationVectorGraphicRegionProperties;
}

/** Raw presentation free draw region. */
export interface RawPresentationFreeDrawRegion extends RawPresentationBaseRegion {
    type: 'FREE_DRAW';
    properties: RawPresentationFreeDrawRegionProperties;
}

/** Raw presentation slide region. */
export interface RawPresentationSlideRegion extends RawPresentationBaseRegion {
    type: 'SLIDE';
    properties: RawPresentationSlideRegionProperties;
}

/** Raw presentation text region properties. */
export interface RawPresentationTextRegionProperties {
    /** Caption of region. */
    caption: string;
    /** Region alpha (transparency, 0 - 255) */
    alpha: number;
    /** Text alignment. */
    align: 'left' | 'center' | 'right';
    /** Text animation effects. */
    animation: {
        /** In animation effect. */
        in: RawPresentationTextRegionAnimationProperties,
        /** Out animation effect. */
        out: RawPresentationTextRegionAnimationProperties
    };
    /** Text value. */
    text: string;
    /** Text value name. (Deprecated) */
    name: string;
    /** Text font family name. */
    fontName: string;
    /** Text font style. */
    fontStyle: {
        /** Set font widget as bold. */
        bold: boolean;
        /** Set font style as italic. */
        italic: boolean;
        /** Set text decoration as underline. */
        underline: boolean;
        /** Set text decoration as line through. */
        strikethrough: boolean;
    };
    textEffect?: {
        speed: number;
        code: string;
        repeat: boolean;
    };
    /** Text font size. */
    fontSize: number | string;
    /** Text font color. (HEXA, #AARRGGBB) */
    fontColor: string;
    /** Text stroke width. */
    strokeWidth: number;
    /** Text stroke color. (HEXA, #AARRGGBB) */
    strokeColor: string;
    /** Shadow X-axis offset (Experimental) */
    shadowDX: number;
    /** Shadow Y-axis offset (Experimental) */
    shadowDY: number;
    /** Shadow radius. */
    shadowRadius: number;
    /** Shadow color. (HEXA, #AARRGGBB) */
    shadowColor: string;
    /** Text line spacing. */
    textLineSpacing: number;
}

/** Raw presentation text animation properties. */
export interface RawPresentationTextRegionAnimationProperties {
    [key: string]: any;
    /** Animation delay. */
    delay: number;
}

/** Raw presentation image region properties. */
export type RawPresentationImageRegionProperties =
    RawPresentationImageRegionSdssTypeProperties |
    RawPresentationImageRegionGoogledriveTypeProperties |
    RawPresentationImageRegionRemoteTypeProperties;

/** Base of raw presentation image region properties. */
interface RawPresentationImageRegionBaseProperties {
    /** Caption of region. */
    caption: string;
    /** Region alpha (transparency, 0 - 255) */
    alpha: number;
    /**
     * Policy of wrapping content in region.
     * - `true`: Match image size as region size. (Force stretch)
     * - `false`: Contain image in region with keep aspect ratio.
     */
    wrapContent?: boolean;
    /** Image file MIME type. */
    mimeType?: string;
    /** Image asset file name. */
    name: string;
}

/** Raw presentation SDSS image region properties. */
interface RawPresentationImageRegionSdssTypeProperties extends RawPresentationImageRegionBaseProperties {
    /** Image asset ID. */
    id: string;
    /** Image asset filename extension. */
    fileType: string;
    /** Image asset source type. */
    srcType: 'SDSS';
    /** Image asset file MD5 value. */
    md5: string;
}

/** Raw presentation Gooogle Drive image region properties. */
interface RawPresentationImageRegionGoogledriveTypeProperties extends RawPresentationImageRegionBaseProperties {
    /** Image asset ID. */
    id: string;
    /** Image asset source type. */
    srcType: 'GOOGLE_DRIVE';
    /** Image asset URL. */
    srcLink: string;
    /** Image thumbnail URL. (`GOOGLE_DRIVE`, `REMOTE`) */
    thumnail?: string;
}

/** Raw presentation remote image region properties. */
interface RawPresentationImageRegionRemoteTypeProperties extends RawPresentationImageRegionBaseProperties {
    /** Image asset source type. */
    srcType: 'REMOTE';
    /** Image asset URL. */
    srcLink: string;
    /** Image thumbnail URL. */
    thumnail?: string;
}

/** Raw presentation video region properties. */
export type RawPresentationVideoRegionProperties =
    RawPresentationVideoRegionSdssTypeProperties |
    RawPresentationVideoRegionYoutubeTypeProperties |
    RawPresentationVideoRegionGoogledriveTypeProperties |
    RawPresentationVideoRegionRemoteTypeProperties;


/** Base of raw presentation video region properties. */
export interface RawPresentationVideoRegionBaseProperties {
    /** Caption of region. */
    caption: string;
    /** Region alpha (transparency, 0 - 255) */
    alpha: number;
    /**
     * Policy of wrapping content in region.
     * - `true`: Match video size as region size. (Force stretch)
     * - `false`: Contain video in region with keep aspect ratio.
     */
    wrapContent?: boolean;
    /** Video name. */
    name: string;
}

/** Raw presentation SDSS video region properties. */
export interface RawPresentationVideoRegionSdssTypeProperties {
    /** Video ID. */
    id: string;
    /** Video asset filename extension. */
    fileType: string;
    /** Video asset source type. */
    srcType: 'SDSS';
    /** Video asset file MD5 value. */
    md5: string;
    /** Video asset file muted value */
    mute: boolean;
    /** Video asset file repeat value */
    repeat: boolean;
}

/** Raw presentation SDSS video region properties. */
export interface RawPresentationVideoRegionYoutubeTypeProperties {
    /** Video ID. */
    id: string;
    /** Video asset source type. */
    srcType: 'YOUTUBE';
    /** Video asset source URL. */
    srcLink: string;
    /** Video asset file muted value */
    mute: boolean;
    /** Video asset file repeat value */
    repeat: boolean;
}

/** Raw presentation SDSS video region properties. */
export interface RawPresentationVideoRegionGoogledriveTypeProperties {
    /** Video ID. */
    id: string;
    /** Video asset source type. */
    srcType: 'GOOGLE_DRIVE';
    /** Video asset source URL. */
    srcLink?: string;
    /** Video asset file muted value */
    mute: boolean;
    /** Video asset file repeat value */
    repeat: boolean;
}

/** Raw presentation SDSS video region properties. */
export interface RawPresentationVideoRegionRemoteTypeProperties {
    /** Video asset source type. */
    srcType: 'REMOTE';
    /** Video asset source URL. */
    srcLink: string;
    /** Video asset file muted value */
    mute: boolean;
    /** Video asset file repeat value */
    repeat: boolean;
}

/** Raw presentation webpage region properties. */
export interface RawPresentationWebpageRegionProperties {
    /** Caption of region. */
    caption: string;
    /** Region alpha (transparency, 0 - 255) */
    alpha: number;
    /** Web page URL. */
    srcLink: string;
    /** Web page source type. */
    srcType: 'REMOTE';
}

/** Raw presentation widget region properties. */
export interface RawPresentationWidgetRegionProperties {
    /** Caption of region. */
    caption: string;
    /** Region alpha (transparency, 0 - 255) */
    alpha: number;
    /** Widget instant ID. */
    id: string;
    /** Widget instant name. */
    name?: string;
    /** Stringified object of widget instant data. */
    data: string;
}

/** Raw presentation frame region properties. */
export interface RawPresentationFrameRegionProperties {
    /** Caption of region. */
    caption: string;
    /** Region alpha (transparency, 0 - 255) */
    alpha: number;
    /**
     * Policy of wrapping content in region.
     * - `true`: Match video size as region size. (Force stretch)
     * - `false`: Contain video in region with keep aspect ratio.
     */
    wrapContent?: boolean;
    /** Frame inner fill color. (HEXA, #AARRGGBB) */
    fillColor: string;
    /** Frame inner fill pattern. */
    fillPattern: string;
    /** Frame border color. (HEXA, #AARRGGBB) */
    lineColor: string;
    /** Frame border thickness. */
    lineDepth: number;
    /** Frame border pattern. */
    linePattern: '' | 'DOTTED' | 'DASHED' | 'SOLID' | 'DOUBLE' | string;
    /** `x1` coordinate to draw line. */
    x1?: number;
    /** `x2` coordinate to draw line. */
    x2?: number;
    /** `y1` coordinate to draw line. */
    y1?: number;
    /** `y1` coordinate to draw line. */
    y2?: number;
    /** Frame name. (Dummy) */
    name?: string;
    /** Frame original height. */
    oriHeight: number;
    /** Frame original width. */
    oriWidth: number;
    /** Frame type. */
    shapeType: 'FREE' | 'RECT' | 'TRIANGLE' | 'ELLIPSE' | 'LINE';
    /** Frame svg element data to render. */
    data: string;
}

/** Raw presentation vector graphic region properties. */
export interface RawPresentationVectorGraphicRegionProperties {
    /** Caption of region. */
    caption: string;
    /** Region alpha (transparency, 0 - 255) */
    alpha: number;
    /**
     * Policy of wrapping content in region.
     * - `true`: Match video size as region size. (Force stretch)
     * - `false`: Contain video in region with keep aspect ratio.
     */
    wrapContent?: boolean;
    /** Vector graphic asset ID. */
    id: string;
    /** Vector graphic asset name. */
    name: string;
    /** Vector graphic original height. */
    oriHeight: number;
    /** Vector graphic original width. */
    oriWidth: number;
    /** Vector graphic asset source URL. */
    srcLink: string;
    /** Vector graphic asset source type. */
    srcType: 'SDSS' | 'GOOGLE_DRIVE' | 'REMOTE';
}

/** Raw presentation free draw region properties. */
export interface RawPresentationFreeDrawRegionProperties {
    /** Caption of region. */
    caption: string;
    /** Region alpha (transparency, 0 - 255) */
    alpha: number;
    /**
     * Policy of wrapping content in region.
     * - `true`: Match video size as region size. (Force stretch)
     * - `false`: Contain video in region with keep aspect ratio.
     */
    wrapContent?: boolean;
    /** Free draw fill color. (HEXA, #AARRGGBB) */
    fillColor: string;
    /** Free draw fill pattern. */
    fillPattern: string;
    /** Free draw line color. (HEXA, #AARRGGBB) */
    lineColor: string;
    /** Free draw line thickness. (HEXA, #AARRGGBB) */
    lineDepth: number;
    /** Free draw line pattern. */
    linePattern: '' | 'DOTTED' | 'DASHED' | 'SOLID' | 'DOUBLE' | string;
    /** Free draw name. (Dummy) */
    name?: string;
    /** Free draw original height. */
    oriHeight: number;
    /** Free draw original width. */
    oriWidth: number;
    /** Free draw svg element data to render. */
    data: string;
}

/** Raw presentation slide region properties. */
export interface RawPresentationSlideRegionProperties {
    /** Caption of region. */
    caption: string;
    /** Region alpha (transparency, 0 - 255) */
    alpha: number;
    /**
     * Policy of wrapping content in region.
     * - `true`: Match video size as region size. (Force stretch)
     * - `false`: Contain video in region with keep aspect ratio.
     */
    wrapContent?: boolean;
    /** Slide asset ID. */
    id: string;
    /** Slide MIME type. */
    mimeType: 'application/vnd.google-apps.presentation';
    /** Slide name. */
    name: string;
    /** Slide asset source URL. */
    srcLink: string;
    /** Slide type. */
    srcType: 'GOOGLE_DRIVE';
}

/** Raw rule data. */
export interface RawPresentationRule {
    /** Is the rule enabled? */
    enable: boolean;
    /** Rule name. */
    name: string;
    /** Rule description. */
    description?: string;
    /** Rule data contents. */
    contents: {
        /** When match to this. */
        when: RawPresentationRuleWhenContents;
        /** Then do this. */
        then: RawPresentationRuleThenContents;
    };
    /**
     * Range for apply this rule.
     * - `null`: Only current presentation.
     * - `string`: Workspace code.
     * - `*`: All presentation.
     */
    applyRange: null | '*' | string;
}

/** Raw rule base content. */
export interface RawPresentationRuleBaseContents {
    /** Rule target type. */
    type: 'VIDEO' | 'WIDGET' | 'SENSOR';
    /** Rule target. (`{target-code}#{region-id}`) */
    target: string;
    /** Rule target attribute name. */
    attribute: string;
    /** Rule value. */
    value: string;
}

/** Raw rule when content. */
export interface RawPresentationRuleWhenContents extends RawPresentationRuleBaseContents {
    /** Rule condition operator. */
    condition: RawPresentationRuleCondition;
}

/** Raw rule then content. */
export interface RawPresentationRuleThenContents extends RawPresentationRuleBaseContents {
    /** Rule action operator. */
    action: RawPresentationRuleAction;
}

/** Rule condition operator. */
type RawPresentationRuleCondition = null | '===' | '!==' | '>' | '>=' | '<' | '<=';

/** Rule action operator. */
type RawPresentationRuleAction = null | '=' | '+' | '-' | '*' | '/';

/** Raw sensor data. */
export interface RawPresentationSensors {
    /** Barcode reader. */
    barcode: RawPresentationSensor;
    /** NFC reader. */
    nfc: RawPresentationSensor;
    /** IR Remote controller receiver. */
    irRemote: RawPresentationSensor;
    /** Photoelectric sensor. */
    photoelectric: RawPresentationSensor;
}

/** Props of raw sensor. */
export interface RawPresentationSensor {
    /** Is sensor enabled? */
    enable: boolean;
}
